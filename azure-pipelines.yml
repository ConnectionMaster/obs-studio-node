trigger:
  branches:
    include:
      - staging
  tags:
    include:
      - v*

workspace:
  clean: all

strategy:
  matrix:
    Electron4:
      RuntimeURL: https://atom.io/download/atom-shell
      RuntimeName: iojs
      RuntimeVersion: v4.1.4
      ElectronVersion: 4.1.4
    Electron2:
      RuntimeURL: https://atom.io/download/atom-shell
      RuntimeName: iojs
      RuntimeVersion: v2.0.8
      ElectronVersion: 2.0.8

pool:
  name: 'Streamlabs OBS Backend'

variables:
  RootDirectory: $(Build.SourcesDirectory)
  SLBuildDirectory: streamlabs-build
  SLGenerator: Visual Studio 15 2017 Win64
  SLDistributeDirectory: distribute
  SLFullDistributePath: $(SLBuildDirectory)\$(SLDistributeDirectory)
  SLArch: x64
  SignTool: C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe
  UnsignedArtifact: obs-studio-node-us-$(Build.BuildId)-$(RuntimeName)-$(RuntimeVersion)
  OBSVersion: 22.0.2

steps:
- script: 'yarn install'
  displayName: 'Install dependencies'

- script: 'yarn add electron@%ElectronVersion% -D'
  displayName: 'Install Electron'

- script: 'git submodule update --init --recursive'
  displayName: 'Update submodules'

- script: 'cmake.exe -H. -B"%SLBuildDirectory%" -G"%SLGenerator%" -DCMAKE_INSTALL_PREFIX="%SLFullDistributePath%\obs-studio-node" -DSTREAMLABS_BUILD=OFF -DNODEJS_NAME=%RuntimeName% -DNODEJS_URL=%RuntimeURL% -DNODEJS_VERSION=%RuntimeVersion%'
  displayName: 'Configure obs-studio-node'

- script: 'cmake.exe --build %SLBuildDirectory% --target install --config RelWithDebInfo'
  displayName: 'Build obs-studio-node'

- script: 'yarn run test'
  env:
    SLOBS_BE_STREAMKEY: $(testsStreamKey)
    SLOBS_TEST_USER_POOL_TOKEN: $(userPoolToken)
  displayName: 'Run tests'

- script: |
    copy "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Redist\MSVC\14.16.27012\onecore\x64\Microsoft.VC141.CRT\vcruntime140.dll" "%SLFullDistributePath%\obs-studio-node\"
    copy "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Redist\MSVC\14.16.27012\onecore\x64\Microsoft.VC141.CRT\msvcp140.dll" "%SLFullDistributePath%\obs-studio-node\"
    copy "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Redist\MSVC\14.16.27012\onecore\x64\Microsoft.VC141.CRT\concrt140.dll" "%SLFullDistributePath%\obs-studio-node\"
    copy "C:\Program Files (x86)\Microsoft Visual Studio\Installer\ucrtbase.dll" "%SLFullDistributePath%\obs-studio-node\"
  displayName: 'Prepare artifacts'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: $(SLFullDistributePath)\obs-studio-node
    includeRootFolder: true
    archiveType: tar
    tarCompression: gz
    archiveFile: '$(SLFullDistributePath)\$(UnsignedArtifact).tar.gz'
  displayName: 'Generate unsigned artifact'

- task: PublishBuildArtifacts@1
  inputs: 
    pathtoPublish: $(SLFullDistributePath)\$(UnsignedArtifact).tar.gz
    artifactName: $(UnsignedArtifact).tar.gz
  displayName: 'Publish unsigned artifact'

- script: |
    echo '##vso[task.setvariable variable=tag]git describe --tags --abbrev=0'
    echo $TAG
    echo '##vso[task.setvariable variable=signedartifact]obs-studio-node-$env:TAG-$env:RuntimeName-$env:RuntimeVersion'
    echo $SIGNEDARTIFACT
    curl -kLO "https://github.com/obsproject/obs-studio/releases/download/%OBSVersion%/OBS-Studio-%OBSVersion%-Full-x64.zip" -f --retry 5
    7z x "OBS-Studio-%OBSVersion%-Full-x64.zip" -oobs-studio-jp9000
    robocopy "obs-studio-jp9000\data\obs-plugins\win-capture" "%SLFullDistributePath%\obs-studio-node\data\obs-plugins\win-capture" & exit 0
  displayName: 'Prepare signed artifact'
  condition: contains(variables['Build.SourceBranch'], 'tags')

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: $(SLFullDistributePath)\obs-studio-node
    includeRootFolder: true
    archiveType: tar
    tarCompression: gz
    archiveFile: '$(SLFullDistributePath)\$(SIGNEDARTIFACT).tar.gz'
  displayName: 'Generate signed artifact'
  condition: contains(variables['Build.SourceBranch'], 'tags')

- task: PublishBuildArtifacts@1
  inputs: 
    pathtoPublish: $(SLFullDistributePath)\$(SIGNEDARTIFACT)tar.gz
    artifactName: $(env:SIGNEDARTIFACT).tar.gz
  displayName: 'Publish signed artifact'
  condition: contains(variables['Build.SourceBranch'], 'tags')

- script: |
    mkdir syms
    mkdir syms\client
    mkdir syms\server

    curl -kL "https://s3.amazonaws.com/getsentry-builds/getsentry/breakpad-tools/windows/breakpad-tools-windows.zip" -o "breakpadtools.zip" -f --retry 5
    7z x "breakpadtools.zip" > nul
    curl -kL "https://github.com/getsentry/sentry-cli/releases/download/1.37.3/sentry-cli-Windows-i686.exe" -o "sentry-cli.exe" -f --retry 5
    ci\run-sentry-cli-azure.cmd 
  displayName: 'Upload pdbs to Sentry'
  condition: contains(variables['Build.SourceBranch'], 'tags')

- task: S3Upload@1
  inputs:
    awsCredentials: 'SLOBS Backend AWS buckets'
    regionName: 'us-west-2'
    bucketName: 'obsstudionodes3.streamlabs.com'
    globExpressions: '$(env:SIGNEDARTIFACT).tar.gz'
    filesAcl: 'public-read'
  displayName: 'Upload artifact to S3'
  condition: contains(variables['Build.SourceBranch'], 'tags')

- script: "shutdown /r /t 10 /c \"Reboot after CI Job finished\" /f /d p:4:1"
  displayName: "Schedule reboot"
  condition: always()
